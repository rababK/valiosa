{
    "openapi": "3.0.0",
    "info": {
        "description": "This is a sample Petstore server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
        "version": "1.0.0",
        "title": "Swagger Petstore",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "servers": [
        {
            "description": "SwaggerHub API Auto Mocking",
            "url": "https://virtserver.swaggerhub.com/8492ed/test/1.0.0"
        },
        {
            "url": "https://wt.convware.sd/"
        }
    ],
    "tags": [
        {
            "name": "domain",
            "description": "Everything about your Pets",
            "externalDocs": {
                "description": "Find out more",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "store",
            "description": "Access to Petstore orders"
        },
        {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
                "description": "Find out more about our store",
                "url": "http://swagger.io"
            }
        }
    ],
    "paths": {
<<<<<<< HEAD
        "/entry/getAllentry": {
            "get": {
                "tags": [
                    "entery"
                ]

               
                





=======
        "/entry/getAllentrys": {
            "get": {
                "summary": "method use to get AllEntry",
                "responses": {
                    "200": {
                        "description": "get All entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
>>>>>>> dev-atharIT
            }
        },
        "/entry/getEntry": {
            "get": {
<<<<<<< HEAD
                "tags": [
                  "entry"
                ],
                "summary": "Finds entries by tags",
                "description": "get an entry from the database",
                "operationId": "getEntry",
                "produces": [
                  "application/json",
                  "application/xml"
                ],
                "parameters": [
                  {
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "collectionFormat": "multi"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "successful operation",
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Pet"
                      }
                    }
                  },
                  "400": {
                    "description": "Invalid tag value"
                  }
                },
                "security": [
                  {
                    "petstore_auth": [
                      "write:pets",
                      "read:pets"
                    ]
                  }
                ],
                "deprecated": true
              }
           
=======
                "summary": "method use to get All Entry",
                "responses": {
                    "200": {
                        "description": "get entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
>>>>>>> dev-atharIT
        },

        "/entry/addEntry": {
            "post": {
<<<<<<< HEAD
                "tags": [
                    "entry"
                ],
                "summary": "Add a new entry to the store",
                "operationId": "addEntry",
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "201": {
                        "description": "The request is complete"
                    }
                },
                "security": [
                    {}
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pet"
                }
            }
            
=======
                "summary": "method use to add Entry",
                "responses": {
                    "200": {
                        "description": "add entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
>>>>>>> dev-atharIT
        },

        "/entry/updateEntry": {
            "put": {
<<<<<<< HEAD
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing entry",
                "operationId": "updateEntry",
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Entery not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pet"
=======
                "summary": "method use to update Entry",
                "responses": {
                    "200": {
                        "description": "update entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
>>>>>>> dev-atharIT
                }
            }
        },
        "/entry/deleteEntry": {
            "delete": {
                "summary": "method use to delete entry",
                "responses": {
                    "200": {
                        "description": "delete entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/domain/getAlldomains": {
            "get": {
                "summary": "method use to get AllEntry",
                "responses": {
                    "200": {
                        "description": "get All entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/domain/getdomain": {
            "get": {
                "summary": "method use to get All Entry",
                "responses": {
                    "200": {
                        "description": "get entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/domain/adddomain": {
            "post": {
                "summary": "method use to add Entry",
                "responses": {
                    "200": {
                        "description": "add entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/domain/updatedomain": {
            "put": {
                "summary": "method use to update Entry",
                "responses": {
                    "200": {
                        "description": "update entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/domain/deleteEntry": {
            "delete": {
                "summary": "method use to delete entry",
                "responses": {
                    "200": {
                        "description": "delete entry succssufly"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/pet": {

            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "operationId": "addPet",
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {}
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pet"
                }
            },

            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "operationId": "updatePet",
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Pet"
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "components": {
        "schemas": {
            "Order": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "petId": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "shipDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                            "placed",
                            "approved",
                            "delivered"
                        ]
                    },
                    "complete": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "xml": {
                    "name": "Order"
                }
            },
            "Category": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Category"
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "userStatus": {
                        "type": "integer",
                        "format": "int32",
                        "description": "User Status"
                    }
                },
                "xml": {
                    "name": "User"
                }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Tag"
                }
            },
            "Pet": {
                "type": "object",
                "required": [
                    "name",
                    "photoUrls"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    },
                    "name": {
                        "type": "string",
                        "example": "doggie"
                    },
                    "photoUrls": {
                        "type": "array",
                        "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                        },
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "xml": {
                            "name": "tag",
                            "wrapped": true
                        },
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "pet status in the store",
                        "enum": [
                            "available",
                            "pending",
                            "sold"
                        ]
                    }
                },
                "xml": {
                    "name": "Pet"
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "requestBodies": {
            "Pet": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/Pet"
                        }
                    }
                },
                "description": "Pet object that needs to be added to the store",
                "required": true
            },
            "UserArray": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "description": "List of user object",
                "required": true
            }
        },
        "securitySchemes": {
            "petstore_auth": {
                "type": "oauth2",
                "flows": {
                    "implicit": {
                        "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                        "scopes": {
                            "write:pets": "modify pets in your account",
                            "read:pets": "read your pets"
                        }
                    }
                }
            },
            "api_key": {
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
            }
        }
    }
}